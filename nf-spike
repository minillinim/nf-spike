#!/usr/bin/env python3

import argparse
import sys
import json
import time
from random import randint

def printError(error):
    sys.stderr.write(
        "%s\n\nERROR:\n\n%s\n\n%s\n\n" % (
            ''.join(["*"]*80),
            str(error),
            ''.join(["*"]*80)))

def do_work( args ):

    if(args.subparser_name == 'manager'):
        with open(args.input, "r") as fh:
            try:
                for line in fh:
                    print(json.dumps(int(line.rstrip())))
            except ValueError:
                pass

    elif(args.subparser_name == 'worker'):
        while(True):
            try:
                line = input()
                time.sleep(randint(0, 100)/500)
                print(json.dumps(int(json.loads(line.rstrip())) * 2))
            except json.decoder.JSONDecodeError:
                break
            except ValueError:
                break
            except EOFError:
                break

    elif(args.subparser_name == 'reporter'):
        while(True):
            try:
                line = input()
                data = json.loads(line.rstrip())
                print(json.dumps(
                    'My fave number is %d' % (
                        int(data))))
            except json.decoder.JSONDecodeError:
                break
            except ValueError:
                break
            except EOFError:
                break

    else:
        printError("Programming error: unexpected args subparser '%s' encountered" % args.subparser_name)
        sys.exit(1)

###############################################################################

if __name__ == '__main__':

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    subparsers = parser.add_subparsers(dest='subparser_name')
    manager_parser = subparsers.add_parser('manager', description='run program as a headnode')
    manager_parser.add_argument('input', help='input file to parse')
    worker_parser = subparsers.add_parser('worker', description='run program as a worker')
    reporter_parser = subparsers.add_parser('reporter', description='run program as a reporter')

    args = parser.parse_args()
    do_work(args)
